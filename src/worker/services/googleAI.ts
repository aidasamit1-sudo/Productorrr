import jwt from 'jsonwebtoken';

interface ServiceAccount {
  type: string;
  project_id: string;
  private_key_id: string;
  private_key: string;
  client_email: string;
}

export class GoogleImagenService {
  constructor(private env: Env) {}

  private async getAccessToken(): Promise<string> {
    const serviceAccount: ServiceAccount = {
      type: "service_account",
      project_id: this.env.GOOGLE_PROJECT_ID,
      private_key_id: this.env.GOOGLE_PRIVATE_KEY_ID,
      private_key: this.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, '\n'),
      client_email: this.env.GOOGLE_CLIENT_EMAIL,
    };

    const now = Math.floor(Date.now() / 1000);
    const payload = {
      iss: serviceAccount.client_email,
      scope: 'https://www.googleapis.com/auth/cloud-platform',
      aud: 'https://oauth2.googleapis.com/token',
      exp: now + 3600,
      iat: now
    };

    const token = jwt.sign(payload, serviceAccount.private_key, { 
      algorithm: 'RS256',
      keyid: serviceAccount.private_key_id 
    });

    const response = await fetch('https://oauth2.googleapis.com/token', {
      method: 'POST',
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: new URLSearchParams({
        grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',
        assertion: token
      })
    });

    if (!response.ok) {
      throw new Error(`Failed to get access token: ${response.statusText}`);
    }

    const result = await response.json();
    return result.access_token;
  }

  async generateImage(prompt: string, resolution: string, productImages: string[]): Promise<string> {
    try {
      const accessToken = await this.getAccessToken();
      const [width, height] = resolution.split('x').map(Number);
      
      // Use the first product image as base
      const baseImage = productImages[0].split(',')[1]; // Remove data:image/jpeg;base64,

      const requestBody = {
        instances: [{
          prompt: prompt,
          image: {
            bytesBase64Encoded: baseImage
          }
        }],
        parameters: {
          sampleCount: 1,
          aspectRatio: width === height ? "1:1" : width > height ? "16:9" : "9:16",
          negativePrompt: "blurry, low quality, distorted, ugly, bad anatomy",
          guidanceScale: 7,
          seed: Math.floor(Math.random() * 1000000)
        }
      };

      const response = await fetch(
        `https://us-central1-aiplatform.googleapis.com/v1/projects/${this.env.GOOGLE_PROJECT_ID}/locations/us-central1/publishers/google/models/imagegeneration:predict`,
        {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${accessToken}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(requestBody)
        }
      );

      if (!response.ok) {
        const errorText = await response.text();
        console.error('Imagen API error:', errorText);
        throw new Error(`Imagen API failed: ${response.status}`);
      }

      const result = await response.json();
      
      if (!result.predictions?.[0]?.bytesBase64Encoded) {
        throw new Error('No image generated by Imagen API');
      }

      const imageBase64 = result.predictions[0].bytesBase64Encoded;
      return await this.storeImage(imageBase64);

    } catch (error) {
      console.error('Image generation error:', error);
      throw new Error(`Failed to generate image: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  private async storeImage(imageBase64: string): Promise<string> {
    const imageBuffer = Uint8Array.from(atob(imageBase64), c => c.charCodeAt(0));
    const filename = `generated/${Date.now()}_${Math.random().toString(36).substr(2, 9)}.png`;
    
    await this.env.IMAGES_BUCKET.put(filename, imageBuffer, {
      httpMetadata: {
        contentType: 'image/png',
        cacheControl: 'public, max-age=31536000', // 1 year cache
      },
    });

    return `https://${this.env.R2_DOMAIN}/${filename}`;
  }
}
